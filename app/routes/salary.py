from . import main
from flask import render_template, request, jsonify
from .utils.requires_login import requires_login
from app.models import Order, Comment, User
from sqlalchemy import desc, func
from datetime import datetime, timedelta
import re
from collections import defaultdict

@main.route('/salary')
@requires_login
def salary():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    employee_id = request.args.get('employee', '')
    period = request.args.get('period', '')
    year = request.args.get('year', '')
    period_type = request.args.get('period_type', 'month')
    work_type = request.args.get('type', 'all')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    employees = User.query.filter(User.id != 0).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    salary_data = calculate_salary(employee_id, period, year, period_type, work_type)
    
    return render_template('salary.html', 
                         employees=employees,
                         salary_data=salary_data,
                         selected_employee=employee_id,
                         selected_period=period,
                         selected_year=year,
                         selected_period_type=period_type,
                         selected_type=work_type)

@main.route('/salary_data')
@requires_login
def salary_data():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ"""
    employee_id = request.args.get('employee', '')
    period = request.args.get('period', '')
    year = request.args.get('year', '')
    period_type = request.args.get('period_type', 'month')
    work_type = request.args.get('type', 'all')
    
    salary_data = calculate_salary(employee_id, period, year, period_type, work_type)
    return jsonify(salary_data)

def calculate_salary(employee_id='', period='', year='', period_type='month', work_type='all'):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """
    # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–∞—Å—á—ë—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    excluded_employees = ['–°–∫—É—Ä–∏–¥–∏–Ω', '–£—Å—Ç–∏–º–æ–≤']
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    orders_query = Order.query
    orders = orders_query.all()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    salary_results = {}
    total_summary = {
        'orders_count': 0,
        'izgotovlenie_total': 0,
        'montaj_total': 0,
        'total_salary': 0,
        'completed_orders': 0,
        'total_orders': len(orders),
        'period_start': None,
        'period_end': None
    }
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    filtered_orders = []
    period_start = None
    period_end = None
    
    if period_type == 'month' and period:
        try:
            year_val, month = period.split('-')
            period_start = datetime(int(year_val), int(month), 1)
            if int(month) == 12:
                period_end = datetime(int(year_val) + 1, 1, 1)
            else:
                period_end = datetime(int(year_val), int(month) + 1, 1)
            total_summary['period_start'] = period_start
            total_summary['period_end'] = period_end
        except:
            pass
    elif period_type == 'year' and year:
        try:
            year_val = int(year)
            period_start = datetime(year_val, 1, 1)
            period_end = datetime(year_val + 1, 1, 1)
            total_summary['period_start'] = period_start
            total_summary['period_end'] = period_end
        except:
            pass
    
    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
        comments = Comment.query.filter(
            Comment.order_id == order.id,
            Comment.user_id == 0  # –¢–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        ).order_by(Comment.datetime).all()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        finish_date = None
        for comment in comments:
            if re.search(r'‚è≥ –°—Ç–∞—Ç—É—Å: .+ -> –ó–∞–≤–µ—Ä—à–µ–Ω–æ', comment.text):
                finish_date = comment.datetime
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑
        if not finish_date:
            continue
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if period_start and period_end:
            if not (period_start <= finish_date < period_end):
                continue
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
        filtered_orders.append((order, comments, finish_date))
    
    total_summary['completed_orders'] = len(filtered_orders)
    
    for order, comments, finish_date in filtered_orders:
        izgotovlenie_worker = None
        montaj_worker = None
        izgotovlenie_price = order.izgotovlenie
        montaj_price = order.montaj
        last_workers = {}
        current_status = None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        comments_by_time = defaultdict(list)
        for comment in comments:
            comments_by_time[comment.datetime].append(comment)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏) –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        for dt in sorted(comments_by_time.keys()):
            group = comments_by_time[dt]
            new_status_in_group = None
            new_executor_in_group = None
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            for c in group:
                status_match = re.search(r'‚è≥ –°—Ç–∞—Ç—É—Å: (.+?) -> (.+)', c.text)
                if status_match:
                    new_status_in_group = status_match.group(2).strip()
                
                executor_match = re.search(r'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: (.+?) -> (.+)', c.text)
                if executor_match:
                    new_executor_in_group = executor_match.group(2).strip()

            # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if new_status_in_group:
                current_status = new_status_in_group
            
            if new_executor_in_group:
                # –ï—Å–ª–∏ —Å–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ,
                # –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤—ã–π —ç—Ç–∞–ø.
                if new_status_in_group:
                    if new_status_in_group == "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ":
                        izgotovlenie_worker = new_executor_in_group
                    elif new_status_in_group == "–ú–æ–Ω—Ç–∞–∂":
                        montaj_worker = new_executor_in_group
                # –ò–Ω–∞—á–µ, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
                else:
                    if current_status == "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ":
                        izgotovlenie_worker = new_executor_in_group
                    elif current_status == "–ú–æ–Ω—Ç–∞–∂":
                        montaj_worker = new_executor_in_group

        if not izgotovlenie_worker and order.manufacturer_id:
            izgotovlenie_worker = order.manufacturer.name if order.manufacturer else None
        if work_type == 'izgotovlenie' and not izgotovlenie_worker:
            continue
        if work_type == 'montaj' and not montaj_worker:
            continue
        if employee_id:
            employee = User.query.get(employee_id)
            if employee:
                employee_name = employee.name
                if izgotovlenie_worker != employee_name and montaj_worker != employee_name:
                    continue
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –°–∫—É—Ä–∏–¥–∏–Ω–∞ –∏ –£—Å—Ç–∏–º–æ–≤–∞ –∏–∑ —Ä–∞—Å—á—ë—Ç–æ–≤
        if izgotovlenie_worker in excluded_employees:
            izgotovlenie_worker = None
        if montaj_worker in excluded_employees:
            montaj_worker = None
        
        if izgotovlenie_worker and izgotovlenie_price:
            if izgotovlenie_worker not in salary_results:
                salary_results[izgotovlenie_worker] = {
                    'orders_count': 0,
                    'izgotovlenie_total': 0,
                    'montaj_total': 0,
                    'total_salary': 0,
                    'orders': [],
                    'avg_order_value': 0,
                    'first_order_date': None,
                    'last_order_date': None
                }
            salary_results[izgotovlenie_worker]['izgotovlenie_total'] += izgotovlenie_price
            salary_results[izgotovlenie_worker]['total_salary'] += izgotovlenie_price
            salary_results[izgotovlenie_worker]['orders_count'] += 1
            salary_results[izgotovlenie_worker]['orders'].append({
                'id': order.id,
                'address': order.address,
                'customer': order.customer,
                'finish_date': finish_date,
                'izgotovlenie_price': izgotovlenie_price,
                'montaj_price': montaj_price,
                'total_price': (izgotovlenie_price or 0) + (montaj_price or 0),
                'work_type': '–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ',
                'price': izgotovlenie_price
            })
            if not salary_results[izgotovlenie_worker]['first_order_date'] or finish_date < salary_results[izgotovlenie_worker]['first_order_date']:
                salary_results[izgotovlenie_worker]['first_order_date'] = finish_date
            if not salary_results[izgotovlenie_worker]['last_order_date'] or finish_date > salary_results[izgotovlenie_worker]['last_order_date']:
                salary_results[izgotovlenie_worker]['last_order_date'] = finish_date
            total_summary['izgotovlenie_total'] += izgotovlenie_price
            total_summary['total_salary'] += izgotovlenie_price
            total_summary['orders_count'] += 1
        if montaj_worker and montaj_price:
            if montaj_worker not in salary_results:
                salary_results[montaj_worker] = {
                    'orders_count': 0,
                    'izgotovlenie_total': 0,
                    'montaj_total': 0,
                    'total_salary': 0,
                    'orders': [],
                    'avg_order_value': 0,
                    'first_order_date': None,
                    'last_order_date': None
                }
            salary_results[montaj_worker]['montaj_total'] += montaj_price
            salary_results[montaj_worker]['total_salary'] += montaj_price
            salary_results[montaj_worker]['orders_count'] += 1
            salary_results[montaj_worker]['orders'].append({
                'id': order.id,
                'address': order.address,
                'customer': order.customer,
                'finish_date': finish_date,
                'izgotovlenie_price': izgotovlenie_price,
                'montaj_price': montaj_price,
                'total_price': (izgotovlenie_price or 0) + (montaj_price or 0),
                'work_type': '–ú–æ–Ω—Ç–∞–∂',
                'price': montaj_price
            })
            if not salary_results[montaj_worker]['first_order_date'] or finish_date < salary_results[montaj_worker]['first_order_date']:
                salary_results[montaj_worker]['first_order_date'] = finish_date
            if not salary_results[montaj_worker]['last_order_date'] or finish_date > salary_results[montaj_worker]['last_order_date']:
                salary_results[montaj_worker]['last_order_date'] = finish_date
            total_summary['montaj_total'] += montaj_price
            total_summary['total_salary'] += montaj_price
            total_summary['orders_count'] += 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for employee_data in salary_results.values():
        if employee_data['orders_count'] > 0:
            employee_data['avg_order_value'] = employee_data['total_salary'] / employee_data['orders_count']
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            employee_data['orders'].sort(key=lambda x: x['finish_date'], reverse=True)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫—É
    sorted_employees = dict(sorted(salary_results.items(), key=lambda x: x[1]['total_salary'], reverse=True))
    
    return {
        'employees': sorted_employees,
        'summary': total_summary
    } 