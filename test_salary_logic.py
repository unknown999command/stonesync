#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
from datetime import datetime

def test_comment_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    test_comments = [
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ê–∫–∏—à–∏–Ω -> –°–∏—Å—Ç–µ–º–∞",
        "‚è≥ –°—Ç–∞—Ç—É—Å: –ú–æ–Ω—Ç–∞–∂ -> –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        "üíµ –¶–µ–Ω–∞ –∑–∞ –º–æ–Ω—Ç–∞–∂: 10000 -> None",
        "üíµ –¶–µ–Ω–∞ –∑–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: 10000 -> None",
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –í–∏—Ç–∞–ª–∏–∫ -> –ê–∫–∏—à–∏–Ω",
        "‚è≥ –°—Ç–∞—Ç—É—Å: –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ -> –ú–æ–Ω—Ç–∞–∂",
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –°–∫—É—Ä–∏–¥–∏–Ω -> –í–∏—Ç–∞–ª–∏–∫",
        "üíµ –¶–µ–Ω–∞ –∑–∞ –º–æ–Ω—Ç–∞–∂: None -> 10000",
        "üíµ –¶–µ–Ω–∞ –∑–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: None -> 10000",
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –£—Å—Ç–∏–º–æ–≤ -> –°–∫—É—Ä–∏–¥–∏–Ω",
        "‚è≥ –°—Ç–∞—Ç—É—Å: –ó–∞–º–µ—Ä -> –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
    ]
    
    print("=== –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ===\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    for comment in test_comments:
        print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        
        # –ü–æ–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_match = re.search(r'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: (.+?) -> (.+)', comment)
        if executor_match:
            old_executor = executor_match.group(1).strip()
            new_executor = executor_match.group(2).strip()
            print(f"  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {old_executor} -> {new_executor}")
        
        # –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_match = re.search(r'‚è≥ –°—Ç–∞—Ç—É—Å: (.+?) -> (.+)', comment)
        if status_match:
            old_status = status_match.group(1).strip()
            new_status = status_match.group(2).strip()
            print(f"  –°—Ç–∞—Ç—É—Å: {old_status} -> {new_status}")
        
        # –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        price_match = re.search(r'üíµ –¶–µ–Ω–∞ –∑–∞ (–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ|–º–æ–Ω—Ç–∞–∂): (.+?) -> (.+)', comment)
        if price_match:
            work_type = price_match.group(1)
            old_price = price_match.group(2).strip()
            new_price = price_match.group(3).strip()
            print(f"  –¶–µ–Ω–∞ –∑–∞ {work_type}: {old_price} -> {new_price}")
        
        print()

def test_improved_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    
    print("=== –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ ===\n")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    comments = [
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –£—Å—Ç–∏–º–æ–≤ -> –°–∫—É—Ä–∏–¥–∏–Ω\n‚è≥ –°—Ç–∞—Ç—É—Å: –ó–∞–º–µ—Ä -> –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ",
        "üíµ –¶–µ–Ω–∞ –∑–∞ –º–æ–Ω—Ç–∞–∂: None -> 10000",
        "üíµ –¶–µ–Ω–∞ –∑–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: None -> 10000",
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –°–∫—É—Ä–∏–¥–∏–Ω -> –í–∏—Ç–∞–ª–∏–∫",
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –í–∏—Ç–∞–ª–∏–∫ -> –ê–∫–∏—à–∏–Ω\n‚è≥ –°—Ç–∞—Ç—É—Å: –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ -> –ú–æ–Ω—Ç–∞–∂",
        "üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ê–∫–∏—à–∏–Ω -> –°–∏—Å—Ç–µ–º–∞\n‚è≥ –°—Ç–∞—Ç—É—Å: –ú–æ–Ω—Ç–∞–∂ -> –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    ]
    
    izgotovlenie_worker = None
    montaj_worker = None
    last_workers = {}
    current_status = None
    
    print("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É:")
    
    for i, comment in enumerate(comments):
        print(f"\n–®–∞–≥ {i+1}: {comment}")
        
        # –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_match = re.search(r'‚è≥ –°—Ç–∞—Ç—É—Å: (.+?) -> (.+)', comment)
        if status_match:
            old_status = status_match.group(1).strip()
            new_status = status_match.group(2).strip()
            current_status = new_status
            print(f"  –°—Ç–∞—Ç—É—Å: {old_status} -> {new_status}")
        
        # –ü–æ–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_match = re.search(r'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: (.+?) -> (.+)', comment)
        if executor_match:
            old_executor = executor_match.group(1).strip()
            new_executor = executor_match.group(2).strip()
            print(f"  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {old_executor} -> {new_executor}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if current_status:
                last_workers[current_status] = new_executor
                print(f"  –°–æ—Ö—Ä–∞–Ω—è–µ–º {new_executor} –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{current_status}'")
            
            # –ï—Å–ª–∏ –≤ —Ç–æ–º –∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if status_match:
                if new_status == "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ":
                    izgotovlenie_worker = new_executor
                    print(f"  => {new_executor} –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª–µ–º")
                elif new_status == "–ú–æ–Ω—Ç–∞–∂":
                    montaj_worker = new_executor
                    print(f"  => {new_executor} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–º")
    
    print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: {last_workers}")
    
    # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞,
    # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if not izgotovlenie_worker and "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" in last_workers:
        izgotovlenie_worker = last_workers["–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"]
        print(f"–ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è: {izgotovlenie_worker}")
    
    if not montaj_worker and "–ú–æ–Ω—Ç–∞–∂" in last_workers:
        montaj_worker = last_workers["–ú–æ–Ω—Ç–∞–∂"]
        print(f"–ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞: {montaj_worker}")
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" in last_workers:
        print("–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        if not izgotovlenie_worker:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" –∏–ª–∏ "–ú–æ–Ω—Ç–∞–∂"
            for status in ["–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", "–ú–æ–Ω—Ç–∞–∂"]:
                if status in last_workers:
                    if status == "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ":
                        izgotovlenie_worker = last_workers[status]
                        print(f"–ë–µ—Ä–µ–º –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ '{status}': {izgotovlenie_worker}")
                    elif status == "–ú–æ–Ω—Ç–∞–∂":
                        montaj_worker = last_workers[status]
                        print(f"–ë–µ—Ä–µ–º –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ '{status}': {montaj_worker}")
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    print(f"–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {izgotovlenie_worker}")
    print(f"–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫: {montaj_worker}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏—Ç–∞–ª–∏–∫ (–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ), –ê–∫–∏—à–∏–Ω (–º–æ–Ω—Ç–∞–∂)")

if __name__ == "__main__":
    test_comment_parsing()
    test_improved_logic() 